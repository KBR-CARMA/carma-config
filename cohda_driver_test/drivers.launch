<?xml version="1.0"?>
<!--
  Copyright (C) 2018-2019 LEIDOS.

  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<!--
	drivers.launch

This file is used for vehicle configurations. The arguments from carma.launch should pass on to carma_src.launch, which should then pass those arguments to this file. The arguments in the carma.launch file will override all of the default values of the arguments being passed, so you should be making changes to the carma.launch to configure it to your vehicle. 

If not using simulated drivers they are activated if the respective mock arguments being passed in are false. These lines below activate the respective actual driver if the respective mock argument being passed is false.

-->

<launch>

  <!-- Directory of Parameter Files -->
  <arg name="CARMA_DIR" default="$(find carma)" doc="The path of the package directory"/>
  <arg name="PARAM_DIR" default="$(arg CARMA_DIR)/launch/params" doc="Directory of yaml parameter files"/>

  <!-- Simulation Usage -->
  <arg name="mock_drivers"        default="" doc="List of driver node base names which will be launched as mock drivers"/>

  <arg name="mock_can"            value="$(eval 'can' in arg('mock_drivers').split())"/>
  <arg name="mock_comms"          value="$(eval 'comms' in arg('mock_drivers').split())"/>
  <arg name="mock_controller"     value="$(eval 'controller' in arg('mock_drivers').split())"/>
  <arg name="mock_gnss"           value="$(eval 'gnss' in arg('mock_drivers').split())"/>
  <arg name="mock_radar"          value="$(eval 'radar' in arg('mock_drivers').split())"/>
  <arg name="mock_imu"            value="$(eval 'imu' in arg('mock_drivers').split())"/>
  <arg name="mock_lidar"          value="$(eval 'lidar' in arg('mock_drivers').split())"/>
  <arg name="mock_camera"         value="$(eval 'camera' in arg('mock_drivers').split())"/>
  <arg name="mock_roadway_sensor" value="$(eval 'roadway_sensor' in arg('mock_drivers').split())"/>

  <!-- DSRC OBU Driver Node -->
  <include unless="$(arg mock_comms)" file="$(find dsrc_driver)/launch/dsrc_node.launch"/>
      
  <!-- PinPoint Driver Node -->
  <include unless="$(arg mock_gnss)" file="$(find pinpoint)/launch/pinpoint.launch"/>

  <!-- SRX CAN Driver Node -->
  <include unless="$(arg mock_can)" file="$(find srx_can_driver)/launch/srx_can_driver_socketcan.launch">
    <arg name="srx_can_can_device" value="can2" />
  </include>

  <!--SRX Controller Driver Node-->
  <include unless="$(arg mock_controller)" file="$(find srx_controller)/launch/srx_controller.launch">

    <!-- Low Speed Values -->
    <arg name="k_p" value="0.5" />
    <arg name="k_i" value="0.003" />
    <arg name="k_d" value="0.04" />
    <!-- HighSpeed Values -->
    <!--
    <arg name="k_p" default="0.1" />
    <arg name="k_i" default="0.01" />
    <arg name="k_d" default="0.005" />
    -->
    <arg name="srx_controller_can_device" value="can1"/>
  </include>
      
  <!-- SRX Radar Driver Node -->
  <include unless="$(arg mock_radar)" file="$(find srx_objects)/launch/srx_objects_socketcan.launch">
    <arg name="srx_objects_can_device" value="can0"/>
  </include>
	
</launch>
